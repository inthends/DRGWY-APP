apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
        entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

// def releaseTime() {
//     return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
// }

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "default"
    productFlavors {
            // main
            huiyun {
                applicationId "com.statistics"
                buildConfigField("int", "ENV_TYPE", "1")
                manifestPlaceholders = [
                                app_name: "慧云管家",
                                JPUSH_APPKEY : "996f9f0191243d335f473952",         //在此替换你的APPKey
                                JPUSH_CHANNEL: "android"        //在此替换你的channel
                        ]
            }
            //安徽
            huiyunAnhui {
                applicationId "com.anhui.statistics"
                buildConfigField("int", "ENV_TYPE", "2")
                manifestPlaceholders = [
                                app_name: "安徽慧云管家",
                                JPUSH_APPKEY : "ce2ecbe56b0486dc5d47f56c",         //在此替换你的APPKey
                                JPUSH_CHANNEL: "android"        //在此替换你的channel
                        ]
            }
        }

    defaultConfig {
//        applicationId "com.statistics"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "2.5.3"
        missingDimensionStrategy 'react-native-camera', 'general'
//         manifestPlaceholders = [
//                 JPUSH_APPKEY : "996f9f0191243d335f473952",         //在此替换你的APPKey
//                 JPUSH_CHANNEL: "android"        //在此替换你的channel
//         ]
        multiDexEnabled true
    }


//     android.applicationVariants.all { variant ->
//             variant.outputs.all { output ->

//                 outputFile.name = "${productFlavors[0].name}_v${defaultConfig.versionName}_${buildType.name}.apk"
//                 def outputFile = output.outputFile
//                 if (variant.buildType.name.equals('release')) {
//                     //生成apk名字的格式：Channel1.0.0_2016-06-22_baidu.apk
//                     //可自定义自己想要生成的格式
//                     def fileName = "${productFlavors[0].name}_v${defaultConfig.versionName}_${buildType.name}.apk"
//                     output.outputFile = new File(outputFile.parent, fileName)
//                 }
//             }
//     }
    android.applicationVariants.all { variant ->
        variant.outputs.all {
                    outputFileName = "app_${productFlavors[0].name}_v${defaultConfig.versionName}_${buildType.name}.apk"
        }
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86-64"
        }
    }
    signingConfigs {
        release {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            storePassword MYAPP_RELEASE_STORE_PASSWORD
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            keyPassword MYAPP_RELEASE_KEY_PASSWORD
            // v1SigningEnabled true
            // v2SigningEnabled false
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"


        }
//        debug{
//                minifyEnabled false
//                zipAlignEnabled false
//                shrinkResources true
//                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//                signingConfig signingConfigs.debug
//            }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86-64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation project(':rn-app-upgrade')
    implementation project(':jpush-react-native')
    implementation project(':jcore-react-native')
    implementation project(':react-native-code-push')
    implementation project(':react-native-location')
    implementation project(':react-native-permissions')
    implementation project(':react-native-camera')

    implementation project(':react-native-svg')
    implementation project(':react-native-audio')
    implementation project(':react-native-sound')
    implementation project(':react-native-image-picker')
    implementation project(':react-native-webview')
    implementation project(':@react-native-community_async-storage')
    implementation project(':react-native-gesture-handler')
    implementation project(':react-native-reanimated')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation files('libs/gson-2.3.1.jar')
    implementation files('libs/yssdk-v2.0.2.jar')
    implementation files('libs/LklMdxServiceAidl_V1.0.0.16659.0_20180928.jar')
    implementation files('libs/LklPOSUtil.jar')

}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}


//上传到蒲公英task
task myUploadApkTask(type: Exec) {
    commandLine 'sh', '-c', './uploadApk.sh'

    //test
    executable "sh"
    args "-c", "echo 'shell say hello to you'"

}

//my define
//运行命令./gradlew myBuild
//将打包后的文件复制到build目录下，这样就不用深入到apk目录，同时还看不到unaligned的apk了
// task copyTask(type: Copy) {
//    from 'build/outputs/apk/'
//    into '/Users/***/Documents/Android/apkFiles/AppName'
//    exclude '*-unaligned.apk'
// }

//Android Gradle plugin to version 2.1.2 and Gradle to version 2.10
//task myBuild(dependsOn: ['assembleDebug', 'assembleRelease', 'copyTask' , 'myUploadApkTask']){
//    copyTask.mustRunAfter assembleRelease
//    myUploadApkTask.mustRunAfter copyTask
//}

//Android Gradle plugin to version 2.2.0 and Gradle to version 2.14.1.
task myBuild() {
    dependsOn 'assembleRelease'
//     dependsOn 'myUploadApkTask'
}
